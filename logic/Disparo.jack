class Disparo {

    field int x, y;
    field int col;
    field int dir;

    constructor Disparo new(int px, int py, int direccion){
        let x = px;
        let y = py;
        let dir = direccion;

        //let col = 1;

        do draw();
        return this;
    }

    method void dispose(){
       do memory.deAlloc(this);
       return;
    }

    method void move() {
        if(dir = 3){
            if(x < -4 ){ 
                do borrar();
                do Memory.deAlloc(this);
                return;
            }
            do Sys.wait(10);
            do borrar(); 
            do draw();
            let x = x-1;
        } 
        if(dir = 4){
            if(x > 26 ){
                do borrar();
                do Memory.deAlloc(this);
                return;
            }
            do Sys.wait(10);
            do borrar(); 
            do draw();
            let x = x+1;
        }
        
        

        return;
    }

    method int convertPos(){
        return y*32;
    }


    method void draw(){

        //Si queremos que se desplace m√°s lentamente sumamos potencias 2 al bit de 16
        //  do Memory.poke(memAddress, 3 + 2^0);
        //  do Memory.poke(memAddress, 3 + 2^1);
        //  do Memory.poke(memAddress, 3 + 2^2);
        //              ...
        //  do Memory.poke(memAddress, 3 + 2^16); y de este se salta al siguiente
        //  do Memory.poke(memAddress + 1, 3 + 2^16); y de este se salta al siguiente

        var int posConvert;
        var int memAddress;

        let posConvert = convertPos();
        // Inicialmente poniendo el disparo en la mitad de la pantalla
        let memAddress = 16384 + posConvert + x + 5;
        
        do Screen.setColor(true);
        do Memory.poke(memAddress, 3);
	    do Memory.poke(memAddress +32, 3);

        return;
    }

     method void borrar(){
        var int posConvert;
        var int memAddress; 

        let posConvert = convertPos();
        if(dir = 3){
            let memAddress = 16384 + posConvert + x + 6 ;
        }else{
            let memAddress = 16384 + posConvert + x + 4 ;
        }

        //let memAddress = 16384 + (x-1/16) ;

        do Screen.setColor(false);
        do Memory.poke(memAddress, 0);
	    do Memory.poke(memAddress +32, 0);
        // column 0
       
        return;
    }

   
}