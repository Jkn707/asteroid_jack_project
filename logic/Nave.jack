class Nave {

    field int x, y;
    field int size;
    field boolean pointLeft;
    field Coordenada coordinates;
    
    constructor Nave new(int px, int py, int sizeb) {
        let x = px;
        let y = py;
        let size = sizeb;

        let coordinates = Coordenada.new(px, py);
        do draw();

        return this;
    }

    method void dispose() {
        do Memory.deAlloc(this);
        return;
    }

    /*method Coordenada getPosition(){
        return coordinates;
    }*/

    method int getX(){
        return x;
    }
    method int getY(){
        return y;
    }

    method void moverNave(int direccion) {
        if (direccion = 1) {
            do moveArriba();
        }
        if (direccion = 2) {
            do moveAbajo();
        }
        if (direccion = 3) {
            do moveIzq();
        }
        if (direccion = 4) {
            do moveDer();
        }
        do Sys.wait(5);  //espera 5 seg
        return;
    }

    method void moveArriba() {
        if (y > 1) {

            if(pointLeft){
                do borrarLeft(); 
                let y = y - 1; 
                do drawLeft(); 
            }else{
                do borrar();  
                let y = y - 1; 
                do draw(); 
            }
        }
        return;
    }

    method void moveAbajo() {
        if ((y + size) < 254) {
            if(pointLeft){
                do borrarLeft();  
                let y = y+ 1; 
                do drawLeft(); 
            }else{
                do borrar(); 
                let y = y + 1; 
                do draw(); 
               
            }
           
        }
        return;
    }

    method void moveIzq() {
        if (x > 1) {
            let pointLeft = true;

            do borrar(); 
            do drawLeft();
        }
        return;
    }

    method void moveDer() {
        if ((x + size) < 510) {
            let pointLeft = false;
            
            do borrarLeft(); 
            do draw(); 
        }
        return;
    }

    method void draw() {
        var int posConvert;
        var int memAddress;

        let posConvert = convertPos(x, y);
        let memAddress = 16384 + posConvert + 15;
        
        do Screen.setColor(true);
        // column 0
        do Memory.poke(memAddress, 224);
        do Memory.poke(memAddress +32, 96);
        do Memory.poke(memAddress +64, 224);
        do Memory.poke(memAddress +96, 480);
        do Memory.poke(memAddress +128, 32760);
        do Memory.poke(memAddress +160, -4);
        do Memory.poke(memAddress +192, -4);
        do Memory.poke(memAddress +224, -4);
        do Memory.poke(memAddress +256, 32760);
        do Memory.poke(memAddress +288, 480);
        do Memory.poke(memAddress +320, 224);
        do Memory.poke(memAddress +352, 96);
        do Memory.poke(memAddress +384, 224);
        // column 1
        do Memory.poke(memAddress +193, 1);
        return;
    }

    method void borrar(){
        var int posConvert;
        var int memAddress; 

        let posConvert = convertPos(x, y);
        let memAddress = 16384 + posConvert +15;

        do Screen.setColor(false);
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        // column 1
        do Memory.poke(memAddress +193, 0);
        return;
    }


    method void drawLeft(){
        var int posConvert;
        var int memAddress;

        let posConvert = convertPos(x, y);
        let memAddress = 16384 + posConvert + 15;
        
        do Screen.setColor(true);
        // column 0
        do Memory.poke(memAddress, 14336);
        do Memory.poke(memAddress +32, 12288);
        do Memory.poke(memAddress +64, 14336);
        do Memory.poke(memAddress +96, 15360);
        do Memory.poke(memAddress +128, -16);
        do Memory.poke(memAddress +160, -8);
        do Memory.poke(memAddress +192, -4);
        do Memory.poke(memAddress +224, -8);
        do Memory.poke(memAddress +256, -16);
        do Memory.poke(memAddress +288, 15360);
        do Memory.poke(memAddress +320, 14336);
        do Memory.poke(memAddress +352, 12288);
        do Memory.poke(memAddress +384, 14336);
        // column 1
        do Memory.poke(memAddress +161, 1);
        do Memory.poke(memAddress +193, 1);
        do Memory.poke(memAddress +225, 1);
        return;
    }

    method void borrarLeft(){
        var int posConvert;
        var int memAddress; 

        let posConvert = convertPos(x, y);
        let memAddress = 16384 + posConvert +15;

        do Screen.setColor(false);
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        // column 1
        do Memory.poke(memAddress +161, 0);
        do Memory.poke(memAddress +193, 0);
        do Memory.poke(memAddress +225, 0);
        return;
    }

    method int convertPos(int xx, int yy){
        //return yy*32 + x/16;
        return yy*32;
    }
}



